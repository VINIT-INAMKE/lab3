import pandas as pd
import seaborn as sns

df = pd.read_csv('Churn_Modelling.csv')

df.columns

x = df[['CreditScore','Age', 'Tenure', 'Balance', 'NumOfProducts', 'HasCrCard',
       'IsActiveMember', 'EstimatedSalary']]

y = df['Exited']

sns.countplot(x=y)

y.value_counts()

#ImbalancedData

from sklearn.preprocessing import StandardScaler
scaler= StandardScaler()
x_scaled = scaler.fit_transform(x)
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x_scaled, y, random_state=0, test_size=0.20)

x_scaled.shape
x_train.shape



from sklearn.neural_network import MLPClassifier
ann = MLPClassifier(hidden_layer_sizes= (100,100,100),random_state=0, max_iter=100, activation='relu')
ann.fit(x_train, y_train)

y_pred = ann.predict(x_test)
from sklearn.metrics import ConfusionMatrixDisplay, accuracy_score, classification_report

ConfusionMatrixDisplay.from_predictions(y_test,y_pred)
accuracy_score(y_test,y_pred)


#Balanced Data


!pip install imbalanced-learn
from imblearn.over_sampling import RandomOverSampler

ros = RandomOverSampler(random_state=0)

x_res, y_res = ros.fit_resample(x,y)

y_res.value_counts()
x_scaled = scaler.fit_transform(x_res)
x_train, x_test, y_train, y_test = train_test_split(x_scaled, y_res, random_state=0, test_size=0.20)

ann = MLPClassifier(hidden_layer_sizes= (100,100,100),random_state=0, max_iter=100, activation='relu')
ann.fit(x_train, y_train)

y_pred = ann.predict(x_test)

ConfusionMatrixDisplay.from_predictions(y_test,y_pred)

accuracy_score(y_test,y_pred)

print(classification_report(y_test,y_pred))